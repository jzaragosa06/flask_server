# import pandas as pd
# import numpy as np

# def compute_sma(df_arg, ts_type="univariate"):
#     df = df_arg.copy(deep=True)
#     window_size = 10

#     if ts_type == "univariate":
#         window_size = window_size
#         sma = df.iloc[:, -1].rolling(window=window_size).mean()
#         sma_df = pd.DataFrame(data=sma.values, index=sma.index, columns=["target"])

#         # how are we going to handle the NaN, generated by the window

#         return sma_df
#     else:
#         window_size = window_size

#         sma_df = pd.DataFrame()
#         for i in range(len(df.columns)):
#             if i != (len(df.columns) - 1):
#                 sma = df.iloc[:, i].rolling(window=window_size).mean()
#                 sma_df[f"Feature_{i}"] = pd.DataFrame(sma)
#             else:
#                 sma = df.iloc[:, i].rolling(window=window_size).mean()
#                 sma_df["target"] = pd.DataFrame(sma)
#         print(type(sma_df))
#         return sma_df

import pandas as pd
import numpy as np

def compute_sma(df_arg, ts_type="univariate", window_sizes=[5, 10, 20]):
    df = df_arg.copy(deep=True)
    sma_df = df.copy()

    for window_size in window_sizes:
        if ts_type == "univariate":
            sma = df.iloc[:, -1].rolling(window=window_size).mean()
            sma_df[f"target_sma_{window_size}"] = sma

        else:  # Multivariate case
            for i in range(len(df.columns)):
                sma = df.iloc[:, i].rolling(window=window_size).mean()
                column_name = df.columns[i]
                sma_df[f"{column_name}_sma_{window_size}"] = sma

    return sma_df


